<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAQ0A/ADlFVwA5S1wAPE1cAD1RXwA7UWAAPFFgAEVBQQBJRkYAS0hHAE1LSgBPTUwAUk5NAFJQ
        TgBATV0AVlNSAFlWVQBcWVcAXVpZAGFdXQBBVGEARVZgAGViYABpZWQAa2hmAGxoZwBtaWkAcm9vAHNx
        bwB1cm8AeHRvAHVycAB3dHEAeHV0AH16dgB8engAgX58AD9mtgA1Y7wAAELKAAFGzQAASM8ADlPJAAVN
        0AAGUdMAAlfWAAdX1gAJVNYAB1nWAAxd0wALWtcAB1fZAANa2wACXtoAAVjcAARb3AAKWdgAC13aAAxe
        2gATXNcAGF3WABBf2QABZd0ACGXeAABo3wAGad8AEGPZABRj2wARYtwAFGXeADpryAAiZdgAOnDXADty
        2QAAXuAAAWHiAABj5AAAZuUAAG3rABFp4wAVauAAEGrkAAV05QABcu4AAnTvAAly6wAIde0ACnjvABNw
        5wAZcOUAG3fqAB1+7gAAdvIAAnjyAAB59AAAfPYAC3zyAAh/9AATf/IAIXzqAEZ72wBBfd8AfoOPAHiA
        kwAfh+8AAI7yAACC+wAAg/wAAIb+AAKK/wANj/8AEoL0ABqB8gAahfQAFo3xABuN8gAfjfIAH476AAKa
        +QAHnPkAHZL1ABmS/gAUmvgAJIbuACGF8gAgh/QAJonyACOM8gAljfIAJYn0ACiJ8gAqjfQALI/1ACKR
        9QAmkfUAKZH1AC+T9wAhkvwAI5b/ACSW/wAtlPkAK5n+ACya/wAwmPkAMZv/ADGc/gA1nv4AAKP+AACl
        /wAEpv8ADqf/AA6o/wAXqP8AGKj/AB2w/wAgp/8AJ6b/ACyl/gAgqP8ANqL+ADGk/gA1pP8AOKH/ADik
        /wAmtP8AUYLbAFGE3wBXhd4AVIbgAHKZ5ABSx/8AYs//AIeFhQCIhYMAioiFAICEjQCNiogAkI2LAJOQ
        jQCFiJAAk5GQAJaTkACWlJIAkZOXAJmWlQCbmZcAnZuaAKCenQCjoZ4AkZagAKOioQCkoqAApqSjAKel
        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
        D///+D//////////////////
</value>
  </data>
</root>